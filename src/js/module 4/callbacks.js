// —Ñ—É–Ω–∫—Ü–∏–∏

// // declaration (–ú–û–ñ–ù–û –≤—ã–∑—ã–≤–∞—Ç—å –¥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
// console.log(abc('David', 26));

// function abc(name, number) {
//   return `${name} is ${number}`;
// }

// // expression (–ù–ï–õ–¨–ó–Ø –≤—ã–∑—ã–≤–∞—Ç—å –î–û –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
// const boo = function (a, b) {
//   return a + b;
// };

// console.log(boo(2, 7));

// // arrow (–ù–ï–õ–¨–ó–Ø –≤—ã–∑—ã–≤–∞—Ç—å –î–û –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏)
// –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–ª–±–µ–∫–∞—Ö)
// –∫–æ–ª–±–µ–∫ –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
// –Ω–µ—è–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–∫–∞)
() => {};

// const abc = (name, number) => `${name} is ${number}`;
// console.log(abc('David', 26));

// const foo = () => 'Mango';
// console.log(foo());

// ===============================================

// // –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ —Å—Ç—Ä–µ–ª–∫–∏
// // function foo(callback) {
// //   callback(10);
// // }
// const foo = (callback) => callback(10);

// // function logger(value) {
// //   console.log(value);
// // }
// const logger = (value) => console.log(value);
// foo(logger); // 10

// ===============================================
// CALLBACKS

// function add(a, b) {
//   return a + b;
// }

// function divide(a, b) {
//   return a / b;
// }

// function calculate(x, y, operation) {
//   return operation(x, y);
// }

// console.log(calculate(2, 2, add));
// console.log(calculate(2, 2, divide));

// const add = (a, b) => a + b;
// const divide = (a, b) => a / b;
// const calculate = (x, y, operation) => operation(x, y);

// const resultAdd = calculate(2, 2, add);
// const resulrDivide = calculate(2, 2, divide);

// console.log(resultAdd); // 4
// console.log(resulrDivide); // 1

// ===========

// function foo(a, b) {
//   console.log(a, b);
// }

// console.log(foo); // —Ñ—É–Ω–∫—Ü–∏—è
// foo(5, 10); // 5 10

// function foo(callback) {
//   console.log('callback', callback);
//   callback(24);
// } // —Ñ—É–Ω–∫—Ü–∏—è –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä.

// function logger(value) {
//   console.log(value);
// }

// console.log('logger', logger);

// // logger —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º callback –≤ —Ñ—É–Ω–∫—Ü–∏–∏ foo
// foo(logger); // 24

// ===========

// function foo(sayHello) {
//   sayHello(25);
// }

// function logger() {
//   console.log('Hello');
// }

// foo(logger); // Hello

// ===========

const arr = [2, 6, 1, 7, 3];

// 3 –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–º–µ–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:

// function add() {
//   let total = arr[0]; // 2 (–Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ - 2)

//   //–¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for:
//   for (let i = 1; i < arr.length; i += 1) {
//     total += arr[i];
//   }
//   return total;
// }

// console.log(add(arr)); // 0+2+6+1+7+3=19

// function mul() {
//   let total = arr[0]; // 2 (–Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ - 2)

//   //–¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for:
//   for (let i = 1; i < arr.length; i += 1) {
//     total *= arr[i];
//   }
//   return total;
// }

// console.log(mul(arr)); // 2*6*1*7*3=252

// function div() {
//     let total = arr[0]; // 2 (–Ω—É–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ - 2)

//     //–¥–æ—Å—Ç—É–ø –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –º–∞—Å—Å–∏–≤–∞ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª for:
//     for (let i = 1; i < arr.length; i += 1) {
//       total /= arr[i];
//     }
//     return total;
//   }

//   console.log(div(arr)); // 0.015873015873015872

// —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å 3 –æ–¥–Ω–æ—Ç–∏–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–º–µ–Ω–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∏—à–µ–º 1 –∫–æ–ª–±–µ–∫-—Ñ—É–Ω–∫—Ü–∏—é
// function each(arr, callback) {
//   let total = arr[0];
//   for (let i = 1; i < arr.length; i += 1) {
//     // –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ü–∏–∫–ª–∞ –Ω–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–∞–µ–º –≤—ã–∑–æ–≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (callback) –∏ –≤ –∏—Ç–æ–≥–µ –∏–∑–±–µ–≥–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
//     total = callback(total, arr[i]);
//   }
//   return total;
// }

// const add = (first, second) => first + second;
// const mul = (first, second) => first * second;
// const div = (first, second) => first / second;

// // –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∫–æ–Ω—Å–æ–ª–µ (add, mul, div) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç callback
// console.log(each(arr, add)); // 19
// console.log(each(arr, mul)); // 252
// console.log(each(arr, div)); // 0.015873015873015872

// ===============================================

// OWN PRACTICE
// function returnCallback(well) {
//   well();
// }

// function newClass() {
//   console.log("I hope I will learn this f*cking callbacks");
// }

// returnCallback(newClass);

// function add(callback) {
//   callback();
// }

// function anotherAdd() {
//   console.log("Yes, we did it");
// }

// add(anotherAdd);

// ===========

// function add(x, y) {
//   return x + y;
// }

// function divide(x, y) {
//   return x / y;
// }

// function result(x, y, calculate) {
//   return calculate(x, y);
// }

// console.log(result(2, 1, add));
// console.log(result(2, 1, divide));

// ===========

// function res(x, y, calculation) {
//   return calculation(x, y);
// }

// console.log(
//   res(2, 1, function anotherAdd(x, y) {
//     return x + y;
//   })
// );
// console.log(
//   res(2, 1, function anotherDivide(x, y) {
//     return x / y;
//   })
// );

// ===========

// const filter = function (array, test) {
//   const filteredArray = [];

//   for (const el of array) {
//     if (test(el)) {
//       filteredArray.push(el);
//     }
//   }

//   return filteredArray;
// };

// const callback = function (value) {
//   return value >= 3;
// };

// const result = filter([1, 2, 3, 4, 5], callback);
// console.log(result);

// ===========

// // createProduct(obj, callback) - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ id, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–ª–±–µ–∫.
// // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞, –¥–æ–±–∞–≤–ª—è—è –µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Å–≤–æ–π—Å—Ç–≤–æ id –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–ª–ª–±–µ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
// // logProduct(product) - –∫–æ–ª–ª–±–µ–∫, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É—é—â–∏–π –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å
// // logTotalPrice(product) - –∫–æ–ª–ª–±–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å

// // –ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - obj, callback
// const createProduct = (obj, callback) => {
//   //   // —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é product, –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
//   //   const product = {
//   //     id: Date.now(),
//   //     // —Ä–∞—Å–ø—ã–ª—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ spread
//   //     ...obj,
//   //   };

//   // ===========

//   // —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é product, –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
//   // –≤—ã–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä callback, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é
//   callback({
//     id: Date.now(),
//     // —Ä–∞—Å–ø—ã–ª—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ spread
//     ...obj,
//   });
// };

// // —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –æ–±—ä–µ–∫—Ç –∏ –≤—ã–≤–æ–¥—è—â–∞—è –≤ –∫–æ–Ω—Å–æ–ª—å name
// const logProduct = (obj) => console.log(`Product ${obj.name}`);

// // —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ª–æ–≥–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
// const logTotalPrice = ({ price, quantity }) =>
//   console.log(`Total price ${price * quantity}`);

// // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—ä–µ–∫—Ç, –∫–æ–ª–ª–±–µ–∫ logProduct)
// createProduct(
//   {
//     name: 'üçé',
//     price: 30,
//     quantity: 3,
//   },
//   logProduct
// );

// // –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–±—ä–µ–∫—Ç, –∫–æ–ª–ª–±–µ–∫ logTotalPrice)
// createProduct(
//   {
//     name: 'üçé',
//     price: 33,
//     quantity: 3,
//   },
//   logTotalPrice
// );

// ===========

// const tooMuch = (first) => first();
// const notTooMuch = (second) => {
//   const a = second === 'second';
//   console.log(a); // false (why?)
// };

// tooMuch(notTooMuch);

// const test = (operation, newArg, qwe) => {
//   qwe();
//   return console.log('result of 2 + 3 =', operation + newArg);
// };

// test(2, 3, () => console.log(3));
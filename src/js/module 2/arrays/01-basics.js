// // массив - для хранения однотипных элементов (сложный тип, внутри есть свойства: длинна, прототип, методы)
// const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// console.log(friends);
// // console.log(friends.length); // длинна массива в консоли
// // console.table(friends); // массив в виде таблицы

// // последний индекс = длинна - 1
// const lastIdx = friends.length - 1;
// console.log(lastIdx);

// console.log(friends[3]); // обращение к элементу массива

// // изменение элемента массива, а не запись в переменную
// friends[1] = "Max";
// console.log(friends);

// friends[2] = "Dasha";
// console.table(friends);

// разобраться к методами в конспекте

// // примитивы и сложные типы:
// // 1. передача по значению
// let a = 10;
// let b = a; // копия

// console.log(a); // 10
// console.log(b); // 10

// // b - э то копия a

// a = 20;
// console.log(a); // 20
// console.log(b); // 10

// // значение а изменилось, а копия b не меняется!!!

// =============== !!! ===============
// // 2. передача по ссылке
// const a = [1, 2, 3];
// // выделяется отдельное место в памяти, потом создается переменная "a" и внутри этой ячейки памяти хранится не сам массив, а указатель !!!(ссылка, pointer) на место в памяти, где хранится сам массив.

// const b = a;
// // создается ячейка в памяти, в которую копируется ссылка!!! на массив (перенаправление указателя)
// // обе переменные указывают на один и тот же массив.

// console.log('a:', a); // [1, 2, 3]
// console.log('b:',b); // [1, 2, 3]

// a[1] = 500;
// console.log('a:',a); // [500, 2, 3]
// console.log('b:',b); // [500, 2, 3]

// console.log(a === b); // true;
// console.log([1, 2, 3] === [1, 2, 3]); // false: 2 массива с одинковыми элементами, но они не равны дрг другу, это две разные ячейки в памяти (у сложных типов сравнение происходит по адресу в памяти, а не по значению).
// // =============== !!! ===============

// // ПРАКТИКА
// const c = [7, 8, 9];
// let d = [7, 8, 9];

// d = a;

// console.log('c:', c);
// console.log('d:', d);

// c[0] = 200;
// console.log('c', c);
// console.log('d:', d);

// console.log(d === a);

// // ПЕРЕБОР:
// const friends = ["Mango", "Kiwi", "Poly", "Ajax"];
// // console.table(friends);

// const lastIdx = friends.length - 1;

// // // если необходим индекс и/или необходимо изменить значение элемента массива, надо использовать классический цикл for
// for (let i = 0; i <= lastIdx; i += 1) {
//   friends[i] += "-1";
//   console.log(friends[i]); // обращение к каждому элементу массива на каждой итерации
// }

// console.table(friends);

// // for...of - для перебора итерируемых объектов:
// for (const friend of friends) {
//   // в одиночном числе имя локальной переменной, то есть friend = friend[i] (в переменной не ссылка, а строка)
//   console.log(friend);
// }
// console.table(friends);

// отличия: более декларативный, меньше синтаксиса.

// ВЫВОД:
// for - если необходим индекс и/или необходимо изменить значение элемента массива
// for...of - если не нужен индекс или не нужно изменять элемент массива

// ПРАКТИКА в файле - payment.
